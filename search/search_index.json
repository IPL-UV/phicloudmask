{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"A Python package for efficient cloud masking in satellite imagery using deep learning models \ud83d\ude80 GitHub : https://github.com/IPL-UV/satalign \ud83c\udf10 PyPI : https://pypi.org/project/satalign/ \ud83d\udee0\ufe0f Overview \ud83d\udcca phicloudmask is a Python package designed to generate cloud masks from Sentinel-2 satellite imagery using a deep learning model. The model can classify different semantic categories such as land, water, snow, various types of clouds, shadows, and areas with no data. This project is inspired by and builds upon the SEnSeIv2 model developed by Francis et al. Background \ud83d\udef0\ufe0f The original code by Francis was complex and hard to understand, so this project aims to provide a more Pythonic and user-friendly implementation. The goal is to offer a straightforward way to apply cloud masking to Sentinel-2 imagery and to provide a foundation for building custom models. Relevant links \ud83d\udd17 \ud83d\udcc4 Research Paper : SEnSeIv2: Improved Cloud Masking for Sentinel-2 Imagery \ud83d\uddc3\ufe0f Original Repository : GitHub - SEnSeIv2 \ud83e\udd17 Model on Hugging Face : Hugging Face - SEnSeIv2 Installation \u2699\ufe0f To install the phicloudmask package, run the following command: pip install phicloudmask Usage \ud83d\ude80 The following sections provide detailed instructions on how to use the phicloudmask model for cloud masking. Load data and weights \ud83d\udce5 Before you begin, ensure that you have the necessary weights and data files in the weights/ directory: spectral_embedding.pt : Weights for the embedding model. cloudmask_weights.pt : Weights for the cloud mask model. demo.pkl : Sample data file containing Sentinel-2 imagery and cloud masks. Load the data and weights into your Python environment: import torch import pickle import pathlib import numpy as np from phicloudmask import CloudMask from phicloudmask.constant import SENTINEL2_DESCRIPTORS # Define the semantic categories mapping cloudsen12_style = { 0 : 0 , 1 : 0 , 2 : 0 , 6 : 0 , # Merged into category 0 (land, water, snow, no_data) 4 : 1 , # Thick cloud -> category 1 3 : 2 , # Thin cloud -> category 2 5 : 3 # Shadow -> category 3 } map_values = lambda x : cloudsen12_style . get ( x , x ) # Load the weights weights_folder = pathlib . Path ( \"weights/\" ) embedding_weights = torch . load ( weights_folder / \"spectral_embedding.pt\" ) cloudmask_weights = torch . load ( weights_folder / \"cloudmask_weights.pt\" ) # Load a sample image with open ( weights_folder / \"demo.pkl\" , \"rb\" ) as f : dict_demo = pickle . load ( f ) array_demo = dict_demo [ \"s2\" ][:, 0 : 512 , 0 : 512 ] # S2 L1C image mask_demo = dict_demo [ \"cloud_mask\" ][:, 0 : 512 , 0 : 512 ] # Original mask Generate cloud masks \u2601\ufe0f Using all spectral bands \ud83c\udf08 To generate cloud masks using all Sentinel-2 spectral bands: 1. Initialize the model : # Initialize the cloud mask model model = CloudMask ( descriptor = SENTINEL2_DESCRIPTORS , device = \"cuda\" ) model . embedding_model . load_state_dict ( embedding_weights ) model . cloud_model . load_state_dict ( cloudmask_weights ) model . eval () - 2. Generate cloud mask: : with torch . no_grad (): image = torch . from_numpy ( array_demo [ None ]) . float () . to ( \"cuda\" ) cloud_probs_all = model ( image ) cloud_mask_all = cloud_probs_all . argmax ( dim = 0 ) . cpu () . numpy () cloud_4class_all = np . vectorize ( map_values )( cloud_mask_all ) Using RGB bands only \ud83c\udfa8 To generate cloud masks using only the RGB bands: 1. Define RGB bands Descriptors : RGB_DESCRIPTORS = [ { \"band_type\" : \"TOA Reflectance\" , \"min_wavelength\" : 645.5 , \"max_wavelength\" : 684.5 }, { \"band_type\" : \"TOA Reflectance\" , \"min_wavelength\" : 537.5 , \"max_wavelength\" : 582.5 }, { \"band_type\" : \"TOA Reflectance\" , \"min_wavelength\" : 446.0 , \"max_wavelength\" : 542.0 }, ] - 2. Reinitialize the model for RGB : model = CloudMask ( descriptor = RGB_DESCRIPTORS , device = \"cuda\" ) model . embedding_model . load_state_dict ( embedding_weights ) model . cloud_model . load_state_dict ( cloudmask_weights ) model . eval () 3. Generate cloud mask for RGB bands : with torch . no_grad (): image = torch . from_numpy ( array_demo [[ 3 , 2 , 1 ]][ None ]) . float () . to ( \"cuda\" ) cloud_probs_rgb = model ( image ) cloud_mask_rgb = cloud_probs_rgb . argmax ( dim = 0 ) . cpu () . numpy () cloud_4class_rgb = np . vectorize ( map_values )( cloud_mask_rgb ) Visualize the results \ud83d\udcca To visualize the original RGB image, the ground truth mask, and the predicted cloud masks: import matplotlib.pyplot as plt fig , axes = plt . subplots ( 2 , 2 , figsize = ( 10 , 10 )) axes = axes . flatten () axes [ 0 ] . imshow ( image [ 0 ] . permute ( 1 , 2 , 0 ) . cpu () . numpy () * 5 ) axes [ 0 ] . set_title ( \"RGB Image\" ) axes [ 1 ] . imshow ( mask_demo [ 0 ]) axes [ 1 ] . set_title ( \"Original Mask - SEnSeIv2\" ) axes [ 2 ] . imshow ( cloud_4class_all ) axes [ 2 ] . set_title ( \"All Bands Mask - phiCloudMask\" ) axes [ 3 ] . imshow ( cloud_4class_rgb ) axes [ 3 ] . set_title ( \"RGB Bands Mask - phiCloudMask\" ) plt . show () Additional information \u2714\ufe0f Understanding the model \ud83e\udde0 The phiCloudMask model leverages a pre-trained neural network architecture to predict cloud masks. It uses two main sets of weights: Embedding weights : Used to convert the spectral data into a meaningful representation for the model. Cloud mask weights : Used for the final classification of each pixel into the predefined categories.","title":"Index"},{"location":"index.html#_1","text":"A Python package for efficient cloud masking in satellite imagery using deep learning models \ud83d\ude80 GitHub : https://github.com/IPL-UV/satalign \ud83c\udf10 PyPI : https://pypi.org/project/satalign/ \ud83d\udee0\ufe0f","title":""},{"location":"index.html#overview","text":"phicloudmask is a Python package designed to generate cloud masks from Sentinel-2 satellite imagery using a deep learning model. The model can classify different semantic categories such as land, water, snow, various types of clouds, shadows, and areas with no data. This project is inspired by and builds upon the SEnSeIv2 model developed by Francis et al.","title":"Overview \ud83d\udcca"},{"location":"index.html#background","text":"The original code by Francis was complex and hard to understand, so this project aims to provide a more Pythonic and user-friendly implementation. The goal is to offer a straightforward way to apply cloud masking to Sentinel-2 imagery and to provide a foundation for building custom models.","title":"Background \ud83d\udef0\ufe0f"},{"location":"index.html#relevant-links","text":"\ud83d\udcc4 Research Paper : SEnSeIv2: Improved Cloud Masking for Sentinel-2 Imagery \ud83d\uddc3\ufe0f Original Repository : GitHub - SEnSeIv2 \ud83e\udd17 Model on Hugging Face : Hugging Face - SEnSeIv2","title":"Relevant links \ud83d\udd17"},{"location":"index.html#installation","text":"To install the phicloudmask package, run the following command: pip install phicloudmask","title":"Installation \u2699\ufe0f"},{"location":"index.html#usage","text":"The following sections provide detailed instructions on how to use the phicloudmask model for cloud masking.","title":"Usage \ud83d\ude80"},{"location":"index.html#load-data-and-weights","text":"Before you begin, ensure that you have the necessary weights and data files in the weights/ directory: spectral_embedding.pt : Weights for the embedding model. cloudmask_weights.pt : Weights for the cloud mask model. demo.pkl : Sample data file containing Sentinel-2 imagery and cloud masks. Load the data and weights into your Python environment: import torch import pickle import pathlib import numpy as np from phicloudmask import CloudMask from phicloudmask.constant import SENTINEL2_DESCRIPTORS # Define the semantic categories mapping cloudsen12_style = { 0 : 0 , 1 : 0 , 2 : 0 , 6 : 0 , # Merged into category 0 (land, water, snow, no_data) 4 : 1 , # Thick cloud -> category 1 3 : 2 , # Thin cloud -> category 2 5 : 3 # Shadow -> category 3 } map_values = lambda x : cloudsen12_style . get ( x , x ) # Load the weights weights_folder = pathlib . Path ( \"weights/\" ) embedding_weights = torch . load ( weights_folder / \"spectral_embedding.pt\" ) cloudmask_weights = torch . load ( weights_folder / \"cloudmask_weights.pt\" ) # Load a sample image with open ( weights_folder / \"demo.pkl\" , \"rb\" ) as f : dict_demo = pickle . load ( f ) array_demo = dict_demo [ \"s2\" ][:, 0 : 512 , 0 : 512 ] # S2 L1C image mask_demo = dict_demo [ \"cloud_mask\" ][:, 0 : 512 , 0 : 512 ] # Original mask","title":"Load data and weights \ud83d\udce5"},{"location":"index.html#generate-cloud-masks","text":"","title":"Generate cloud masks \u2601\ufe0f"},{"location":"index.html#using-all-spectral-bands","text":"To generate cloud masks using all Sentinel-2 spectral bands: 1. Initialize the model : # Initialize the cloud mask model model = CloudMask ( descriptor = SENTINEL2_DESCRIPTORS , device = \"cuda\" ) model . embedding_model . load_state_dict ( embedding_weights ) model . cloud_model . load_state_dict ( cloudmask_weights ) model . eval () - 2. Generate cloud mask: : with torch . no_grad (): image = torch . from_numpy ( array_demo [ None ]) . float () . to ( \"cuda\" ) cloud_probs_all = model ( image ) cloud_mask_all = cloud_probs_all . argmax ( dim = 0 ) . cpu () . numpy () cloud_4class_all = np . vectorize ( map_values )( cloud_mask_all )","title":"Using all spectral bands \ud83c\udf08"},{"location":"index.html#using-rgb-bands-only","text":"To generate cloud masks using only the RGB bands: 1. Define RGB bands Descriptors : RGB_DESCRIPTORS = [ { \"band_type\" : \"TOA Reflectance\" , \"min_wavelength\" : 645.5 , \"max_wavelength\" : 684.5 }, { \"band_type\" : \"TOA Reflectance\" , \"min_wavelength\" : 537.5 , \"max_wavelength\" : 582.5 }, { \"band_type\" : \"TOA Reflectance\" , \"min_wavelength\" : 446.0 , \"max_wavelength\" : 542.0 }, ] - 2. Reinitialize the model for RGB : model = CloudMask ( descriptor = RGB_DESCRIPTORS , device = \"cuda\" ) model . embedding_model . load_state_dict ( embedding_weights ) model . cloud_model . load_state_dict ( cloudmask_weights ) model . eval () 3. Generate cloud mask for RGB bands : with torch . no_grad (): image = torch . from_numpy ( array_demo [[ 3 , 2 , 1 ]][ None ]) . float () . to ( \"cuda\" ) cloud_probs_rgb = model ( image ) cloud_mask_rgb = cloud_probs_rgb . argmax ( dim = 0 ) . cpu () . numpy () cloud_4class_rgb = np . vectorize ( map_values )( cloud_mask_rgb )","title":"Using RGB bands only \ud83c\udfa8"},{"location":"index.html#visualize-the-results","text":"To visualize the original RGB image, the ground truth mask, and the predicted cloud masks: import matplotlib.pyplot as plt fig , axes = plt . subplots ( 2 , 2 , figsize = ( 10 , 10 )) axes = axes . flatten () axes [ 0 ] . imshow ( image [ 0 ] . permute ( 1 , 2 , 0 ) . cpu () . numpy () * 5 ) axes [ 0 ] . set_title ( \"RGB Image\" ) axes [ 1 ] . imshow ( mask_demo [ 0 ]) axes [ 1 ] . set_title ( \"Original Mask - SEnSeIv2\" ) axes [ 2 ] . imshow ( cloud_4class_all ) axes [ 2 ] . set_title ( \"All Bands Mask - phiCloudMask\" ) axes [ 3 ] . imshow ( cloud_4class_rgb ) axes [ 3 ] . set_title ( \"RGB Bands Mask - phiCloudMask\" ) plt . show ()","title":"Visualize the results \ud83d\udcca"},{"location":"index.html#additional-information","text":"","title":"Additional information \u2714\ufe0f"},{"location":"index.html#understanding-the-model","text":"The phiCloudMask model leverages a pre-trained neural network architecture to predict cloud masks. It uses two main sets of weights: Embedding weights : Used to convert the spectral data into a meaningful representation for the model. Cloud mask weights : Used for the final classification of each pixel into the predefined categories.","title":"Understanding the model \ud83e\udde0"},{"location":"CHANGELOG.html","text":"Changelog \ud83d\udcdc All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.0.2] - 2024-06-23 Added \u2728 Improved cloud masking accuracy with updated model weights. Added new examples for both RGB and full spectral band masking. Enhanced documentation with more detailed usage instructions. \ud83d\udcda Fixed \ud83d\udc1b Corrected a bug in the weight loading mechanism that caused crashes on some systems. [0.0.1] - 2024-06-23 Added \u2728 Basic structure for phicloudmask with initial cloud masking functions and utilities. Set up CI/CD pipeline with GitHub Actions for continuous integration and deployment. \ud83d\ude80 Added basic tests and coverage reports to ensure code quality. \u2705","title":"Changelog"},{"location":"CHANGELOG.html#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog \ud83d\udcdc"},{"location":"CHANGELOG.html#002-2024-06-23","text":"","title":"[0.0.2] - 2024-06-23"},{"location":"CHANGELOG.html#added","text":"Improved cloud masking accuracy with updated model weights. Added new examples for both RGB and full spectral band masking. Enhanced documentation with more detailed usage instructions. \ud83d\udcda","title":"Added \u2728"},{"location":"CHANGELOG.html#fixed","text":"Corrected a bug in the weight loading mechanism that caused crashes on some systems.","title":"Fixed \ud83d\udc1b"},{"location":"CHANGELOG.html#001-2024-06-23","text":"","title":"[0.0.1] - 2024-06-23"},{"location":"CHANGELOG.html#added_1","text":"Basic structure for phicloudmask with initial cloud masking functions and utilities. Set up CI/CD pipeline with GitHub Actions for continuous integration and deployment. \ud83d\ude80 Added basic tests and coverage reports to ensure code quality. \u2705","title":"Added \u2728"},{"location":"CODE_OF_CONDUCT.html","text":"Contributor covenant code of conduct \ud83d\udcdc Our pledge \ud83e\udd1d In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. \ud83c\udf0e\ud83e\udd17 Our standards \ud83d\udccf Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language. \ud83d\ude0a Being respectful of differing viewpoints and experiences. \ud83e\udd14\ud83d\udc42 Gracefully accepting constructive criticism. \ud83d\udee0\ufe0f Focusing on what is best for the community. \ud83e\udd32 Showing empathy towards other community members. \ud83e\udd7a\u2764\ufe0f Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances. \ud83d\udeab\ud83d\udcac Trolling, insulting/derogatory comments, and personal or political attacks. \ud83d\udeab\ud83d\ude20 Public or private harassment. \ud83d\udeab\ud83d\udc65 Publishing others' private information, such as a physical or electronic address, without explicit permission. \ud83d\udeab\ud83c\udfe1 Other conduct which could reasonably be considered inappropriate in a professional setting. \ud83d\udeab\ud83d\udc54 Our responsibilities \ud83d\udee1\ufe0f Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \ud83c\udf10 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \ud83d\udea8 All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \ud83d\udc4f This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of conduct"},{"location":"CODE_OF_CONDUCT.html#contributor-covenant-code-of-conduct","text":"","title":"Contributor covenant code of conduct \ud83d\udcdc"},{"location":"CODE_OF_CONDUCT.html#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. \ud83c\udf0e\ud83e\udd17","title":"Our pledge \ud83e\udd1d"},{"location":"CODE_OF_CONDUCT.html#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language. \ud83d\ude0a Being respectful of differing viewpoints and experiences. \ud83e\udd14\ud83d\udc42 Gracefully accepting constructive criticism. \ud83d\udee0\ufe0f Focusing on what is best for the community. \ud83e\udd32 Showing empathy towards other community members. \ud83e\udd7a\u2764\ufe0f Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances. \ud83d\udeab\ud83d\udcac Trolling, insulting/derogatory comments, and personal or political attacks. \ud83d\udeab\ud83d\ude20 Public or private harassment. \ud83d\udeab\ud83d\udc65 Publishing others' private information, such as a physical or electronic address, without explicit permission. \ud83d\udeab\ud83c\udfe1 Other conduct which could reasonably be considered inappropriate in a professional setting. \ud83d\udeab\ud83d\udc54","title":"Our standards \ud83d\udccf"},{"location":"CODE_OF_CONDUCT.html#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our responsibilities \ud83d\udee1\ufe0f"},{"location":"CODE_OF_CONDUCT.html#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope \ud83c\udf10"},{"location":"CODE_OF_CONDUCT.html#enforcement","text":"All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement \ud83d\udea8"},{"location":"CODE_OF_CONDUCT.html#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution \ud83d\udc4f"},{"location":"CONTRIBUTING.html","text":"Contributing to phicloudmask \ud83e\udd1d We welcome contributions from the community! Every contribution, no matter how small, is appreciated and credited. Here\u2019s how you can get involved: How to contribute \ud83d\udee0\ufe0f Fork the repository: Start by forking the phicloudmask repository to your GitHub account. \ud83c\udf74 Clone your fork locally: cd <directory_in_which_repo_should_be_created> git clone https://github.com/YOUR_GITHUB_USERNAME/phicloudmask.git cd phicloudmask Set up your local environment: \ud83c\udf31 If you're using pyenv , select a Python version: pyenv local <x.y.z> Install dependencies and activate the environment: poetry install poetry shell Install pre-commit hooks: poetry run pre-commit install Create a branch for your changes: \ud83d\udd8b\ufe0f git checkout -b name-of-your-bugfix-or-feature Make your changes: Develop your feature or fix, ensuring to write clear, concise commit messages and include any necessary tests. Run checks on your changes: \u2705 Run formatting checks: make check Run unit tests: make test Optionally, run tests across different Python versions using tox: tox Commit your changes and push your branch: \ud83d\ude80 git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request: Go to your repository on GitHub and create a pull request to the main branch of the phicloudmask repository. Make sure your pull request meets the following guidelines: Include tests for your changes. Update documentation if your pull request adds functionality. Provide a detailed description of your changes. Types of contributions \ud83d\udce6 Report Bugs: \ud83d\udc1b Report bugs by creating an issue on the phicloudmask GitHub repository . Please include: Your operating system name and version. Details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs: \ud83d\udee0\ufe0f Look through the GitHub issues for bugs tagged with \"bug\" and \"help wanted\". These are open for anyone who wants to contribute a fix. Implement Features: \u2728 Help implement new features by checking issues tagged with \"enhancement\" and \"help wanted\". Write Documentation: \ud83d\udcda phicloudmask can always benefit from improved documentation. You can contribute by enhancing the official documentation, writing clear docstrings, or even creating blog posts and tutorials. Submit Feedback: \ud83d\udcac Propose new features or provide feedback by filing an issue on the phicloudmask GitHub repository . If you propose a new feature, please explain in detail how it would work and keep the scope narrow to make implementation easier. Remember that this is a community-driven project, and every bit of feedback is valuable! Get Started! \ud83d\ude80 Ready to contribute? Follow the steps above to set up phicloudmask for local development and start making your mark on the project. We\u2019re excited to see what you\u2019ll contribute!","title":"Contributing"},{"location":"CONTRIBUTING.html#contributing-to-phicloudmask","text":"We welcome contributions from the community! Every contribution, no matter how small, is appreciated and credited. Here\u2019s how you can get involved:","title":"Contributing to phicloudmask \ud83e\udd1d"},{"location":"CONTRIBUTING.html#how-to-contribute","text":"Fork the repository: Start by forking the phicloudmask repository to your GitHub account. \ud83c\udf74 Clone your fork locally: cd <directory_in_which_repo_should_be_created> git clone https://github.com/YOUR_GITHUB_USERNAME/phicloudmask.git cd phicloudmask Set up your local environment: \ud83c\udf31 If you're using pyenv , select a Python version: pyenv local <x.y.z> Install dependencies and activate the environment: poetry install poetry shell Install pre-commit hooks: poetry run pre-commit install Create a branch for your changes: \ud83d\udd8b\ufe0f git checkout -b name-of-your-bugfix-or-feature Make your changes: Develop your feature or fix, ensuring to write clear, concise commit messages and include any necessary tests. Run checks on your changes: \u2705 Run formatting checks: make check Run unit tests: make test Optionally, run tests across different Python versions using tox: tox Commit your changes and push your branch: \ud83d\ude80 git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request: Go to your repository on GitHub and create a pull request to the main branch of the phicloudmask repository. Make sure your pull request meets the following guidelines: Include tests for your changes. Update documentation if your pull request adds functionality. Provide a detailed description of your changes.","title":"How to contribute \ud83d\udee0\ufe0f"},{"location":"CONTRIBUTING.html#types-of-contributions","text":"Report Bugs: \ud83d\udc1b Report bugs by creating an issue on the phicloudmask GitHub repository . Please include: Your operating system name and version. Details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs: \ud83d\udee0\ufe0f Look through the GitHub issues for bugs tagged with \"bug\" and \"help wanted\". These are open for anyone who wants to contribute a fix. Implement Features: \u2728 Help implement new features by checking issues tagged with \"enhancement\" and \"help wanted\". Write Documentation: \ud83d\udcda phicloudmask can always benefit from improved documentation. You can contribute by enhancing the official documentation, writing clear docstrings, or even creating blog posts and tutorials. Submit Feedback: \ud83d\udcac Propose new features or provide feedback by filing an issue on the phicloudmask GitHub repository . If you propose a new feature, please explain in detail how it would work and keep the scope narrow to make implementation easier. Remember that this is a community-driven project, and every bit of feedback is valuable!","title":"Types of contributions \ud83d\udce6"},{"location":"CONTRIBUTING.html#get-started","text":"Ready to contribute? Follow the steps above to set up phicloudmask for local development and start making your mark on the project. We\u2019re excited to see what you\u2019ll contribute!","title":"Get Started! \ud83d\ude80"}]}